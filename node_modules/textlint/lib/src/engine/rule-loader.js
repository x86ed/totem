"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadFromDirAsESM = loadFromDirAsESM;
const module_interop_1 = require("@textlint/module-interop");
const fs = __importStar(require("node:fs"));
const path = __importStar(require("node:path"));
const resolver_1 = require("@textlint/resolver");
const config_loader_1 = require("@textlint/config-loader");
/**
 * Load all rule modules from specified directory.
 * These are filtered by [extname]
 * @param {String} [rulesDir] Path to rules directory, may be relative. Defaults to `lib/rules`.
 * @param {String | String[]} [extnames] extension names
 * @returns {Object} Loaded rule modules by rule ids (file names).
 */
async function loadFromDirAsESM(rulesDir, extnames = [".js", ".ts"]) {
    let rulesDirAbsolutePath;
    if (!rulesDir) {
        rulesDirAbsolutePath = path.join(__dirname, "rules");
    }
    else {
        rulesDirAbsolutePath = path.resolve(process.cwd(), rulesDir);
    }
    const files = await fs.promises.readdir(rulesDirAbsolutePath);
    const ruleFiles = files.filter((file) => {
        if (Array.isArray(extnames)) {
            if (!extnames.includes(path.extname(file))) {
                return false;
            }
        }
        else {
            if (path.extname(file) !== extnames) {
                return false;
            }
        }
        return true;
    });
    return Promise.all(ruleFiles.map(async (ruleFile) => {
        var _a;
        const withoutExt = path.basename(ruleFile, path.extname(ruleFile));
        const mod = await (0, resolver_1.dynamicImport)(path.join(rulesDirAbsolutePath, ruleFile), {
            parentModule: "textlint"
        });
        const ruleModule = (0, module_interop_1.moduleInterop)((_a = mod.exports) === null || _a === void 0 ? void 0 : _a.default);
        if (!(0, config_loader_1.isTextlintRuleModule)(ruleModule)) {
            throw new Error(`Loaded Module ${ruleFile} should export rule module`);
        }
        const ret = {
            rule: ruleModule,
            ruleId: withoutExt,
            options: true
        };
        return ret;
    }));
}
//# sourceMappingURL=rule-loader.js.map